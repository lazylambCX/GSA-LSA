/*
 * this code is only used for education perpose only
 * Please give ceditation to Lazylamb
*/
package bioinformatics;

import static java.lang.Integer.parseInt;
import java.util.Stack;


public class sequenceAlignment extends javax.swing.JFrame {

    /**
     * Creates new form sequenceAlignment
     */
    public sequenceAlignment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sequence Alignment Calculator");
        setResizable(false);

        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(0));

        jLabel1.setText("Sequence A");

        jLabel2.setText("Sequence B");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText("GAP");

        jLabel4.setText("Match");

        jLabel5.setText("Mis-Match");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField4)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jToggleButton1.setText("LSA");

        jToggleButton2.setText("GSA");

        jToggleButton3.setText("MIN");

        jToggleButton4.setText("MAX");

        jLabel6.setText("GSA or LSA?");

        jLabel7.setText("MIN or MAX?");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToggleButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton4)
                .addGap(19, 19, 19))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jScrollPane3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(19, 19, 19)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // input option
        //  sequenceA, sequenceB, gap, match, mismatch
        // selected options: 
        //  min/max(optional) gsa/lsa
            
         
        
        //default input
        String sequenceA; //="AAGT";
        String sequenceB; // = "AGC";       
        
        //input setting ( getvalue from the main frame from the GUI to the hardline code)
        sequenceA = jTextField1.getText();
        sequenceB = jTextField2.getText();
        if(jTextField1.getText().equals("") && jTextField2.getText().equals("")){
            jTextField1.setText("Enter a Vaild Input");
            jTextField2.setText("Enter a Vaild Input");
        }else if(jTextField1.getText().equals("") || jTextField2.getText().equals("")){
            if(jTextField1.getText().equals(""))
                jTextField1.setText("Enter a Vaild Input");
            else
                jTextField2.setText("Enter a Vaild Input");
        }
        
        //create stack
        Stack seqA = new Stack();
        Stack seqB = new Stack();
        
        // The penalties to apply
        int gap, mismatch, match; // = 1;
        
        //GUI input        
        gap = parseInt(jTextField3.getText());
        match = parseInt(jTextField4.getText());
        mismatch = parseInt(jTextField5.getText());
        if(jTextField3.getText().equals(" ")&&jTextField4.getText().equals(" ")&&jTextField5.getText().equals(" ")){
            jTextField3.setText("N/A");
            jTextField4.setText("N/A");
            jTextField5.setText("N/A");
            
        }else if(jTextField3.getText().equals("") || jTextField4.getText().equals("") || jTextField5.getText().equals("")){
            if(jTextField3.getText().equals(""))
                jTextField3.setText("N/A");
            if(jTextField4.getText().equals(""))
                jTextField4.setText("N/A");
            if(jTextField5.getText().equals(""))
                jTextField5.setText("N/A");
        }  
        
        String operator1="max"; //default   max
        String operator2;   //default   GSA   
        
        //GUI
        operator2 ="N/A";
        if(jToggleButton1.isSelected() && !jToggleButton2.isSelected()){
            operator2 = "LSA";
            System.out.println("LSA");
        }else{
            System.out.println("LSA + deslected");
        }
        if(jToggleButton2.isSelected() && !jToggleButton1.isSelected()){
            operator2 = "GSA";
            System.out.println("GSA");
        }else{
            System.out.println("GSA + deslected");
        }
        if(jToggleButton3.isSelected() && !jToggleButton4.isSelected()){
            operator1 = "min";
            System.out.println("MIN");
        }else{
            System.out.println("MIN + deslected");
        }
        if(jToggleButton4.isSelected() && !jToggleButton3.isSelected()){
            operator1 = "max";
            System.out.println("MAX");
        }else{
            System.out.println("MAX + deslected");
        }
                
        
        
        int total = 0, counter = 0;
        
        //create blank matrix--
        int[][] opt = new int[sequenceA.length() + 1][sequenceB.length() + 1];

          
        if(operator2.equals("GSA")){
            //GSA
            for (int i = 1; i <= sequenceA.length(); i++)
                opt[i][0] = opt[i - 1][0] + gap;
            for (int j = 1; j <= sequenceB.length(); j++)
                opt[0][j] = opt[0][j - 1] + gap;
            //---matrix---
            //Inializing the matrix
            jTextArea1.setText("");
            for (int i = 1; i <= sequenceA.length(); i++) {
                for (int j = 1; j <= sequenceB.length(); j++) {
                    int scoreDiag = opt[i - 1][j - 1] + (sequenceA.charAt(i-1) == sequenceB.charAt(j-1) ? match : mismatch);
                    int scoreLeft = opt[i][j - 1] + gap; 
                    int scoreUp = opt[i - 1][j] + gap; 
                    if(operator1.equals("min") || operator1.equals("Min")){
                        opt[i][j] = Math.min(Math.min(scoreDiag, scoreLeft), scoreUp);
                    }else{
                        opt[i][j] = Math.max(Math.max(scoreDiag, scoreLeft), scoreUp);
                    }
                    jTextArea1.append(i + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                    System.out.println(i + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                    jTextArea1.append("\n");
                }
            }

            //Print out the matrix
            System.out.println("\n");
            jTextArea1.append("\n");
            for (int i = 0; i <= sequenceA.length(); i++) {
                for (int j = 0; j <= sequenceB.length(); j++){
                    System.out.print(opt[i][j] + "\t");
                    jTextArea1.append(opt[i][j] + "\t");
                }
                System.out.println();
                jTextArea1.append("\n");
            }

            //---reverse---
            System.out.println("\n");
            jTextArea2.setText("");
            for (int i = sequenceA.length(); i >=0; i--) {
                for (int j = sequenceB.length(); j >= 0 ; j--){
                    if(i == 0 || j ==0){
                        break;
                    }
                    int scoreDiag = opt[i - 1][j - 1] + (sequenceA.charAt(i-1) == sequenceB.charAt(j-1) ? match : mismatch);
                    int scoreLeft = opt[i][j - 1] + gap;
                    int scoreUp = opt[i - 1][j] + gap;
                    if(operator1.equals("min") || operator1.equals("Min")){
                        if(scoreDiag < scoreLeft && scoreDiag < scoreUp){
                            System.out.println(i + " It Went Diagonal" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                            jTextArea2.append("It Went Diagonal" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                            jTextArea2.append("\n");
                            seqA.push(sequenceA.charAt(i-1));
                            seqB.push(sequenceB.charAt(j-1));
                            i -= 1;
                        }else if(scoreUp < scoreLeft && scoreUp < scoreDiag){
                            System.out.println(i + " It Went Up" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                            jTextArea2.append("It Went Up" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                            jTextArea2.append("\n");
                            seqA.push(sequenceA.charAt(i-1));
                            seqB.push('-');
                        }else if(scoreLeft < scoreUp && scoreLeft < scoreDiag){
                            System.out.println(i + " It Went Left" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                            jTextArea2.append("It Went Left" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                            jTextArea2.append("\n");
                            seqA.push('-');
                            seqB.push(sequenceB.charAt(j-1));
                        }
                    }else{
                        if(scoreDiag > scoreLeft && scoreDiag > scoreUp){
                            System.out.println(i + " It Went Diagonal" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                            jTextArea2.append("It Went Diagonal" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                            jTextArea2.append("\n");
                            seqA.push(sequenceA.charAt(i-1));
                            seqB.push(sequenceB.charAt(j-1));
                            i -= 1;
                        }else if(scoreUp > scoreLeft && scoreUp > scoreDiag){
                            System.out.println(i + " It Went Up" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                            jTextArea2.append("It Went Up" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                            jTextArea2.append("\n");
                            seqA.push(sequenceA.charAt(i-1));
                            seqB.push('-');
                        }else if(scoreLeft > scoreUp && scoreLeft > scoreDiag){
                            System.out.println(i + " It Went Left" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                            jTextArea2.append("It Went Left" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                            jTextArea2.append("\n");
                            seqA.push('-');
                            seqB.push(sequenceB.charAt(j-1));
                        }
                    }
                    
                }
            }
        }else{
            //LSA
            // First of all, compute insertions and deletions at 1st row/column
            for (int i = 1; i <= sequenceA.length(); i++){ //rows 
                if(gap < 0)
                    opt[i][0] = opt[i - 1][0] + 0;
                else
                    opt[i][0] = opt[i - 1][0] + gap;
            }
            for (int j = 1; j <= sequenceB.length(); j++){ // columns 
                if(gap < 0)
                    opt[0][j] = opt[0][j - 1] + 0;
                else
                    opt[0][j] = opt[0][j - 1] + gap;
            }
            System.out.println("LSA");            
           //---matrix---
            //Inializing the matrix
            jTextArea1.setText("");
            for (int i = 1; i <= sequenceA.length(); i++) {
                for (int j = 1; j <= sequenceB.length(); j++) {
                    int scoreDiag = opt[i - 1][j - 1] + (sequenceA.charAt(i-1) == sequenceB.charAt(j-1) ? match : mismatch);
                    int scoreLeft = opt[i][j - 1] + gap; 
                    int scoreUp = opt[i - 1][j] + gap; 
                    if(operator1.equals("min") || operator1.equals("Min")){
                        if(scoreLeft < 0){scoreLeft = 0;}
                        if(scoreUp < 0){scoreUp = 0;}
                        if(scoreDiag < 0){scoreDiag = 0;}
                        opt[i][j] = Math.min(Math.min(scoreDiag, scoreLeft), scoreUp);
                    }else{
                        if(scoreLeft < 0){scoreLeft = 0;}
                        if(scoreUp < 0){scoreUp = 0;}
                        if(scoreDiag < 0){scoreDiag = 0;}
                        opt[i][j] = Math.max(Math.max(scoreDiag, scoreLeft), scoreUp);
                    }
                    System.out.println(i + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                    jTextArea1.append(i + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                    jTextArea1.append("\n");
                }
            }
            //Print out the matrix
            System.out.println("\n");
            jTextArea1.append("\n");
            for (int i = 0; i <= sequenceA.length(); i++) {
                for (int j = 0; j <= sequenceB.length(); j++){
                    System.out.print(opt[i][j] + "\t");
                    jTextArea1.append(opt[i][j] + "\t");
                    }
                System.out.println();
                jTextArea1.append("\n");
            }
            //---reverse---
            System.out.println("\n");
            jTextArea2.setText("");
            for (int i = sequenceA.length(); i >=0; i--) {
                for (int j = sequenceB.length(); j >= 0 ; j--){
                    if(i == 0 || j ==0){
                        break;
                    }
                    if(opt[i][j] != 0){
                        
                        int scoreDiag = opt[i - 1][j - 1] + (sequenceA.charAt(j-1) == sequenceB.charAt(i-1) ? match : mismatch);
                        int scoreLeft = opt[i][j - 1] + gap;
                        int scoreUp = opt[i - 1][j] + gap; 
                        if(operator1.equals("min") || operator1.equals("Min")){
                            if(scoreDiag < scoreLeft && scoreDiag < scoreUp){
                                if(scoreLeft < 0){scoreLeft = 0;}
                                if(scoreUp < 0){scoreUp = 0;}
                                if(scoreDiag < 0){scoreDiag = 0;}
                                System.out.println("It Went Diagonal" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                                jTextArea2.append("It Went Diagonal" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                                jTextArea2.append("\n");
                                seqA.push(sequenceA.charAt(i-1));
                                seqB.push(sequenceB.charAt(j-1));
                                i -= 1;
                            }else if(scoreUp < scoreLeft && scoreUp < scoreDiag){
                                if(scoreLeft < 0){scoreLeft = 0;}
                                if(scoreUp < 0){scoreUp = 0;}
                                if(scoreDiag < 0){scoreDiag = 0;}
                                System.out.println("It Went Up" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                                jTextArea2.append("It Went Up" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                                jTextArea2.append("\n");
                                seqA.push(sequenceA.charAt(i-1));
                                seqB.push('-');
                            }else if(scoreLeft < scoreUp && scoreLeft < scoreDiag){
                                if(scoreLeft < 0){scoreLeft = 0;}
                                if(scoreUp < 0){scoreUp = 0;}
                                if(scoreDiag < 0){scoreDiag = 0;}
                                System.out.println("It Went Left" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                                jTextArea2.append("It Went Left" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                                jTextArea2.append("\n");
                                seqA.push('-');
                                seqB.push(sequenceB.charAt(i-1));
                            }
                        }else{
                            if(scoreDiag > scoreLeft && scoreDiag > scoreUp){
                                if(scoreLeft < 0){scoreLeft = 0;}
                                if(scoreUp < 0){scoreUp = 0;}
                                if(scoreDiag < 0){scoreDiag = 0;}
                                System.out.println("It Went Diagonal" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                                jTextArea2.append("It Went Diagonal" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                                jTextArea2.append("\n");
                                seqA.push(sequenceA.charAt(i-1));
                                seqB.push(sequenceB.charAt(j-1));
                                i -= 1;
                            }else if(scoreUp > scoreLeft && scoreUp > scoreDiag){
                                if(scoreLeft < 0){scoreLeft = 0;}
                                if(scoreUp < 0){scoreUp = 0;}
                                if(scoreDiag < 0){scoreDiag = 0;}
                                System.out.println("It Went Up" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                                jTextArea2.append("It Went Up" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                                jTextArea2.append("\n");
                                seqA.push(sequenceA.charAt(i-1));
                                seqB.push('-');
                            }else if(scoreLeft > scoreUp && scoreLeft > scoreDiag){
                                if(scoreLeft < 0){scoreLeft = 0;}
                                if(scoreUp < 0){scoreUp = 0;}
                                if(scoreDiag < 0){scoreDiag = 0;}
                                System.out.println("It Went Left" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                                jTextArea2.append("It Went Left" + ": scoreUp= " + scoreUp + "|| scoreLeft= " + scoreLeft + "|| scoreDiag= " + scoreDiag);
                                jTextArea2.append("\n");
                                seqA.push('-');
                                seqB.push(sequenceB.charAt(i-1));
                            }
                        }
                        
                    }
                    
                }
            } 
        }
        //Optimal Alignment 
        System.out.println("\n");
        jTextArea3.setText("\n");
        String [][]optAlig = new String[3][seqA.size()+1];
        optAlig[0][0] = "Seq A |";
        optAlig[1][0] = "Seq B |";
        optAlig[2][0] = "Cost  |";
        System.out.println("\n");
        
        if(seqA.isEmpty() || seqA.isEmpty()){
            System.out.println("No Valid Optimal Alignment");
            jTextArea3.append("No Valid Optimal Alignment");
        }else{
            for(int i = 1; i <= seqA.size()+2;i++){
                int compare; 
                char compA =  (char) seqA.pop();
                optAlig[0][i] = String.valueOf(compA);
                char compB =  (char) seqB.pop();
                optAlig[1][i] = String.valueOf(compB);
                if(compA == compB){
                    compare = match;
                    total += match;
                }else if(compA == '-' || compB == '-' ){
                    compare = gap;
                    total += gap;
                }else{
                    compare = mismatch;
                    total += mismatch;
                }
                optAlig[2][i] = String.valueOf(compare);
                counter +=1;
            }
            for (int k = 0; k <= 2; k++) {
                for (int j = 0; j <= counter; j++){
                    System.out.print(optAlig[k][j] + "\t");
                    jTextArea3.append(optAlig[k][j] + "\t");
                    }
                System.out.println();
                jTextArea3.append("\n");
            }
            System.out.println("Total: " + total);
            jTextArea3.append("Total: " + total);
        } 
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        // Clear all Input
        
        //clear the TextField
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        
        //Clear the Text Area
        jTextArea1.setText("");
        jTextArea2.setText("");
        jTextArea3.setText("");
        
        //Toggle all button to Deault
        
        
        //Inter-input
        
        
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sequenceAlignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sequenceAlignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sequenceAlignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sequenceAlignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sequenceAlignment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    // End of variables declaration                   
}
